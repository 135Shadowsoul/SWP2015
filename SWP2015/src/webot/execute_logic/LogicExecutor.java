package webot.execute_logic;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.TimeoutException;
import javax.mail.MessagingException;
import javax.mail.internet.AddressException;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.openqa.selenium.NoSuchElementException;
import org.xtext.bot.language.bla.CompareFeature;
import org.xtext.bot.language.bla.IfCompareExpression;
import org.xtext.bot.language.bla.impl.ClickImpl;
import org.xtext.bot.language.bla.impl.ConnectImpl;
import org.xtext.bot.language.bla.impl.IFStatementImpl;
import org.xtext.bot.language.bla.impl.IfAndExpressionImpl;
import org.xtext.bot.language.bla.impl.IfCompareExpressionImpl;
import org.xtext.bot.language.bla.impl.IfOrExpressionImpl;
import org.xtext.bot.language.bla.impl.NotificationImpl;
import org.xtext.bot.language.bla.impl.ReadImpl;
import org.xtext.bot.language.bla.impl.ShowImpl;
import org.xtext.bot.language.bla.impl.StartImpl;
import org.xtext.bot.language.bla.impl.VarImpl;
import org.xtext.bot.language.bla.impl.WaitImpl;
import org.xtext.bot.language.bla.impl.WriteImpl;
import org.xtext.bot.language.bla.impl.AddressImpl;
import webot.WeBot;
import webot.gui.Log;
import webot.gui.Logger;

/**
 * 
 * Class for parsing the XMI file data into java
 *
 */
public class LogicExecutor
{
	private GameLogic gameLogic;
	private boolean stopped;
	private WeBot weBot;
	private Logger logger;

	/**
	 * Constructor
	 */
	public LogicExecutor()
	{
		gameLogic = new GameLogic();
	}


	public LogicExecutor(WeBot weBot) 
	{
		this.gameLogic = new GameLogic();
		this.weBot = weBot;
		logger = new Logger();
	}


	/**
	 * Executing the Logic given from the user
	 * 
	 * @param list : list including the EObjects generated by the specified Xtext Logic ??
	 * @throws Exception 
	 */
	public void executeLogic(EList<EObject> list)
	{	


		stopped = false;

		// going through EList and executing instructions
		for (EObject instruction : list) 
		{		
			if(stopped)
			{
				log("Stopped by user!");

				gameLogic.stop();
				break;
			}

			String command = instruction.eClass().getName();	

			if(command.equals("Start"))
			{
				String start = ((StartImpl) instruction).getName();

				Date date = null;

				SimpleDateFormat sdf = new SimpleDateFormat();

				// try to find a user defined start date(time)
				try 
				{
					date = sdf.parse(start);
				}
				// if unable to find a valid date, set time to the current and start actions
				catch (ParseException e) 
				{
					date = new Date(System.currentTimeMillis());			
				}

				log("starting at" + date);

				gameLogic.start(date);
			}


			if(command.equals("Notification"))
			{ 
				String massage = ((NotificationImpl) instruction).getName();			
				
				try 
				{
					log(gameLogic.notifyMessage(massage));
				}
				catch (AddressException e) 
				{
					log("ERROR: Invalid email address!");
					log(e.getMessage());					
				}
				catch (MessagingException e) 
				{
					log("ERROR: Email not sent!");
					log(e.getMessage());
				}
			}


			if(command.equals("Address"))
			{ 
				String address = ((AddressImpl) instruction).getName();			
				gameLogic.setAddress(address);
			}


			if(command.equals("Stop"))
			{
				gameLogic.stop();
				log("Stopped by script!");
				break;
			}


			if(command.equals("NoClose"))
			{
				gameLogic.noClose();
			}


			if(command.equals("Wait"))
			{
				log("Waiting...");

				int millis = ((WaitImpl) instruction).getName();
				gameLogic.executeWait(millis);

				log("Continue script!");
			}


			if(command.equals("Show"))
			{
				EList<String> names = ((ShowImpl) instruction).getName();
				EList<String> values = ((ShowImpl) instruction).getValue();

				gameLogic.showStatistc(names, values);
			}


			if(command.equals("Connect"))
			{

				String url = ((ConnectImpl) instruction).getName();
				log("Try to connect to " + url + " (URL)!");
				gameLogic.connect(url);
			}


			if(command.equals("Write"))
			{
				String xpath = ((WriteImpl) instruction).getValue();
				String value = ((WriteImpl) instruction).getName();

				try 
				{
					gameLogic.write(xpath, value);
					log("Wrote" + value  + " (value) to the following" + xpath + " xpath!");
				}
				catch (NoSuchElementException e) 
				{
					log("ERROR: Field does not exist! (Write)");
					log(e.getMessage());
				}
				catch (TimeoutException e) 
				{
					log("ERROR: Connection timed out! (Write)");
					log(e.getMessage());
				}
			}


			if(command.equals("Read"))
			{
				String xpath = ((ReadImpl) instruction).getName();
				String result = "";
				
				try 
				{
					result = gameLogic.read(xpath);
					log("Read " + result + " from " + xpath + " (xpath)!");
				}
				catch (NoSuchElementException e)
				{
					log("ERROR: Field does not exist! (Read)");
					log(e.getMessage());
				} 
				catch (TimeoutException e)
				{
					log("ERROR: Connection timed out! (Read)");
					log(e.getMessage());
				}

			}


			if(command.equals("Click"))
			{
				String xpath = ((ClickImpl) instruction).getName();
				
				try 
				{
					gameLogic.click(xpath);
					log("Click at the following xpath" + xpath + " (xpath)!");
	
				}
				catch (NoSuchElementException e)
				{
					log("ERROR: Field does not exist! (Click)");
					log(e.getMessage());
				}
				catch (TimeoutException e) 
				{
					log("ERROR: Connection timed out! (Click)");
					log(e.getMessage());
				}
			}

		
			if(command.equals("Var"))
			{
				String varName = ((VarImpl) instruction).getName();
				String value = "";
				
				try 
				{
					value = gameLogic.read(((VarImpl) instruction).getValue().getName());
					gameLogic.newVariable(varName, value);
					
					log("Set " + varName + " (variableName) with the specified read " + value + " (xpath)!");
					
				}
				catch (NoSuchElementException e)
				{
					log("ERROR: Field does not exist! (Var)");
					log(e.getMessage());
				}
				catch (TimeoutException e) 
				{
					log("ERROR: Connection timed out! (Var)");
					log(e.getMessage());
				}


			}


			if(command.equals("IFStatement"))
			{
				String getif = ((IFStatementImpl) instruction).getIf().toString();
				System.out.println((getif));
				rateIf(((IFStatementImpl) instruction).getIf());

			}


			if(command.equals("WhileLoop"))
			{

			}

		}


	}


	/**
	 * Function to extract all needed operators to decide the boolean value of an If-Statement
	 * 
	 * @param ifStatement
	 * @return
	 */
	private boolean rateIf(EObject ifStatement)
	{
		if(ifStatement.eClass().getName().equals("IfCompareExpression"))
		{
			CompareFeature left = ((IfCompareExpressionImpl)ifStatement).getLeftFeature();
			CompareFeature right = ((IfCompareExpressionImpl)ifStatement).getRightFeature();
			String operant = ((IfCompareExpressionImpl)ifStatement).getCompareOperant();


			// TODO werte auslesen und dann vergleichen
			/*
			 * 1. Abfragen, was in left und right ist und ggf. ausführen 
			 * 2. Type-Test
			 * 3. Testen
			 */

			System.out.println(left.toString());


			return true;
		}

		if(ifStatement.eClass().getName().equals("IfAndExpression"))
		{
			IfCompareExpression left = ((IfAndExpressionImpl)ifStatement).getLeftFeature();
			EObject right = ((IfAndExpressionImpl)ifStatement).getRightFeature();

			return rateIf(left) & rateIf(right);
		}

		if(ifStatement.eClass().getName().equals("IfOrExpression"))
		{
			IfCompareExpression left = ((IfOrExpressionImpl)ifStatement).getLeftFeature();
			EObject right = ((IfOrExpressionImpl)ifStatement).getRightFeature();

			return rateIf(left) | rateIf(right);
		}

		return false;

	}


	/**
	 * Abording the Application
	 */
	public void abort() 
	{
		stopped = true;		
	}


	/**
	 * Release the log messages for all different user inputs (like wait, connect, read ,..)
	 * @param message
	 * 
	 */
	public void log(String message)
	{
		Log log = new Log(message);
		weBot.addLog(log);
		logger.addLog(message);
	}


}
